#include <iostream>
#include <chrono>
#include <cstdlib>
#include <string>
#include <fstream>

using namespace std;

struct tree_element {
    int info;
    tree_element* left;
    tree_element* right;
    int height;
};

string cr, cl, cp;

struct tree {    
    int height(tree_element* n) {
        if (n == nullptr)
            return 0;
        return n->height;
    }

    int max(int a, int b) {
        return (a > b) ? a : b;
    }
    tree_element* new_node(int k) {
        tree_element* node = new tree_element();
        node->info = k;
        node->left = nullptr;
        node->right = nullptr;
        node->height = 1;
        return (node);
    }

    tree_element* right_rotate(tree_element* y) {
        tree_element* x = y->left;
        tree_element* T2 = x->right;
        x->right = y;
        y->left = T2;
        y->height = max(height(y->left),
            height(y->right)) + 1;
        x->height = max(height(x->left),
            height(x->right)) + 1;
        return x;
    }

    tree_element* left_rotate(tree_element* x) {
        tree_element* y = x->right;
        tree_element* T2 = y->left;
        y->left = x;
        x->right = T2;
        x->height = max(height(x->left),
            height(x->right)) + 1;
        y->height = max(height(y->left),
            height(y->right)) + 1;
        return y;
    }

    int get_balance_factor(tree_element* N) {
        if (N == nullptr)
            return 0;
        return height(N->left) - height(N->right);
    }

    tree_element* insert(tree_element* node, int key) {
        if (node == nullptr)
            return (new_node(key));
        if (key < node->info)
            node->left = insert(node->left, key);
        else if (key > node->info)
            node->right = insert(node->right, key);
        else
            return node;

        node->height = 1 + max(height(node->left),
            height(node->right));
        int balanceFactor = get_balance_factor(node);
        if (balanceFactor > 1) {
            if (key < node->left->info) {
                return right_rotate(node);
            }
            else if (key > node->left->info) {
                node->left = left_rotate(node->left);
                return right_rotate(node);
            }
        }
        if (balanceFactor < -1) {
            if (key > node->right->info) {
                return left_rotate(node);
            }
            else if (key < node->right->info) {
                node->right = right_rotate(node->right);
                return left_rotate(node);
            }
        }
        return node;
    }

    tree_element* usun_elem(tree_element* root, int key) {
        if (root == nullptr)
            return root;
        if (key < root->info)
            root->left = usun_elem(root->left, key);
        else if (key > root->info)
            root->right = usun_elem(root->right, key);
        else {
            if ((root->left == nullptr) ||
                (root->right == nullptr)) {
                tree_element* temp = root->left ? root->left : root->right;
                if (temp == nullptr) {
                    temp = root;
                    root = nullptr;
                }
                else
                    *root = *temp;
                free(temp);
            }
            else {
                tree_element* temp = minAVL(root->right);
                root->info = temp->info;
                root->right = usun_elem(root->right,
                    temp->info);
            }
        }

        if (root == nullptr)
            return root;

        root->height = 1 + max(height(root->left),
            height(root->right));
        int balanceFactor = get_balance_factor(root);
        if (balanceFactor > 1) {
            if (get_balance_factor(root->left) >= 0) {
                return right_rotate(root);
            }
            else {
                root->left = left_rotate(root->left);
                return right_rotate(root);
            }
        }
        if (balanceFactor < -1) {
            if (get_balance_factor(root->right) <= 0) {
                return left_rotate(root);
            }
            else {
                root->right = right_rotate(root->right);
                return left_rotate(root);
            }
        }
        return root;
    }
    void print_tree(string sp, string sn, tree_element* v)
    {
        string s;
        if (v)
        {
            s = sp;
            if (sn == cr) s[s.length() - 2] = ' ';
            print_tree(s + cp, cr, v->right);

            s = s.substr(0, sp.length() - 2);
            cout << s << sn << v->info << endl;

            s = sp;
            if (sn == cl) s[s.length() - 2] = ' ';
            print_tree(s + cp, cl, v->left);
        }
    }
    void inorder(tree_element* elem) {
        if (elem) {
            inorder(elem->left);
            std::cout << elem->info << '-';
            inorder(elem->right);
        }
    }

    void preorder(tree_element* elem) {
        if (elem) {
            std::cout << elem->info << '-';
            preorder(elem->left);
            preorder(elem->right);
        }
    }

    void postorder(tree_element* elem) {
        if (elem) {
            postorder(elem->left);
            postorder(elem->right);
            std::cout << elem->info << '-';
        }
    }
    tree_element* maxAVL(tree_element* elem)
    {
        if (elem) {
            while (elem->right) {
                cout << elem->info << '-';
                elem = elem->right;
            }
        }
        return elem;
    }

    tree_element* minAVL(tree_element* elem)
    {
        if (elem) {
            while (elem->left) {
                cout << elem->info << '-';
                elem = elem->left;
            }
        }
        return elem;
    }
    tree_element* search(tree_element *root, int wartosc) {
        if (!root) return nullptr;
        tree_element* temp = root;
        while (temp) {
            if (temp->info == wartosc) return temp;
            if (temp->info > wartosc) temp = temp->left;
            else temp = temp->right;
        }
        return temp;
    }
    void usun(tree_element* elem) {
        if (elem) {
            usun(elem->left);
            usun(elem->right);
            cout << elem->info << '-';
            delete elem;
        }
    }
};

//   t.inorder, t.preorder, t.postorder, t.insert, t.usun_elem, t.usun, t.print_tree, t.search, t.minAVL, t.maxAVL


int main() {
    ofstream times;
    int place = 0;
    int tab[13] = { 10000, 30000, 50000, 70000, 90000, 110000, 130000, 150000, 170000, 190000, 210000, 230000, 250000 };
    cr = cl = cp = "  ";
    cr[0] = 218; cr[1] = 196;
    cl[0] = 192; cl[1] = 196;
    cp[0] = 179;
    auto start = std::chrono::high_resolution_clock::now();
    auto stop = std::chrono::high_resolution_clock::now();
    for (int x = 12; x > -1; x--) {
        times.open("Czasy.txt", ios_base::app);
        times << "Tablica długości: " << tab[x];
        times.close();
        start = std::chrono::high_resolution_clock::now();
        for (int proba = 0; proba < 5; proba++) {
            tree_element* root = nullptr;
            tree t;
            for (int i = tab[x]; i > 0; i--) {
                root = t.insert(root, i);
                if ((i % 1000) == 0)
                    cout << '\n' << ++place << '\n';
            }
            stop = std::chrono::high_resolution_clock::now();
            times.open("Czasy.txt", ios_base::app);
            times << "\nTworzenie: " << std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count() << '\n';
            times.close();
            start = std::chrono::high_resolution_clock::now();
            t.minAVL(root);
            stop = std::chrono::high_resolution_clock::now();
            times.open("Czasy.txt", ios_base::app);
            times << "\nWyszukanie MIN: " << std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count() << '\n';
            times.close();
            start = std::chrono::high_resolution_clock::now();
            t.inorder(root);
            stop = std::chrono::high_resolution_clock::now();
            times.open("Czasy.txt", ios_base::app);
            times << "\nWypiszanie inorder: " << std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count() << '\n';
            times.close();
            t.usun(root);
        }
    }
}